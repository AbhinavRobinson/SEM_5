# -*- coding: utf-8 -*-
"""image_lab_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-nrGDmC6WWO-dEUrMC6GXlMSWUW7hG6r
"""

from PIL import Image  
import PIL  
import matplotlib.pyplot as plt
# creating a image object (main image)  
im1 = Image.open(r"/content/Unknown.jpeg")  
  
# quantize a image  
im1 = im1.quantize(4)  
  
# to show specified image  
im1

import math
import numpy as np
p = Image.open('/content/Unknown.jpeg').convert('LA').convert('RGB')
p_array = np.array(p)
p_array.shape
p.show()
L = 4
fmax = 256
fmin = 0
B = fmax-fmin
q = B/L
for i in range (p_array.shape[0]):
    for j in range (p_array.shape[1]):
        for k in range(p_array.shape[2]):
            p_array[i,j,k]  = math.floor((p_array[i,j,k]-fmin)/2)*q+q/2+fmin
arr_to_img = Image.fromarray(p_array)
print(type(arr_to_img))
arr_to_img

import math
p = Image.open('/content/Unknown.jpeg').convert('LA').convert('RGB')
p_array = np.array(p)
p_array.shape
p.show()
L = 64
fmax = 127
fmin = 0
B = fmax-fmin
q = B/L
for i in range (p_array.shape[0]):
    for j in range (p_array.shape[1]):
        for k in range(p_array.shape[2]):
            p_array[i,j,k]  = math.floor((p_array[i,j,k]-fmin)/2)*q+q/2+fmin
arr_to_img = Image.fromarray(p_array)
print(type(arr_to_img))
arr_to_img

import math
p = Image.open('/content/Unknown.jpeg').convert('LA').convert('RGB')
p_array = np.array(p)
p_array.shape
p.show()
L = 8
fmax = 256
fmin = 0
B = fmax-fmin
q = B/L
for i in range (p_array.shape[0]):
    for j in range (p_array.shape[1]):
        for k in range(p_array.shape[2]):
            p_array[i,j,k]  = math.floor((p_array[i,j,k]-fmin)/2)*q+q/2+fmin
arr_to_img = Image.fromarray(p_array)
print(type(arr_to_img))
arr_to_img

import math
p = Image.open('/content/Unknown.jpeg').convert('LA').convert('RGB')
p_array = np.array(p)
p_array.shape
p.show()
L = 16
fmax = 256
fmin = 0
B = fmax-fmin
q = B/L
for i in range (p_array.shape[0]):
    for j in range (p_array.shape[1]):
        for k in range(p_array.shape[2]):
            p_array[i,j,k]  = math.floor((p_array[i,j,k]-fmin)/2)*q+q/2+fmin
arr_to_img = Image.fromarray(p_array)
print(type(arr_to_img))
arr_to_img

import scipy.spatial.distance as dist
import numpy as np
import cv2
from google.colab.patches import cv2_imshow



#read image
img_grey = cv2.imread('/content/Unknown.jpeg', cv2.IMREAD_GRAYSCALE)

# define a threshold, 128 is the middle of black and white in grey scale
thresh = 128

# threshold the image
img_binary = cv2.threshold(img_grey, thresh, 255, cv2.THRESH_BINARY)[1]

d=cv2.distanceTransform(img_binary,cv2.DIST_L1,3)
print(d)

import scipy.spatial.distance as dist
import numpy as np
import cv2
from google.colab.patches import cv2_imshow



#read image
img_grey = cv2.imread('/content/Unknown.jpeg', cv2.IMREAD_GRAYSCALE)

# define a threshold, 128 is the middle of black and white in grey scale
thresh = 128

# threshold the image
img_binary = cv2.threshold(img_grey, thresh, 255, cv2.THRESH_BINARY)[1]

e=cv2.distanceTransform(img_binary,cv2.DIST_L2,3)
print(e)

import scipy.spatial.distance as dist
import numpy as np
import cv2
from google.colab.patches import cv2_imshow



#read image
img_grey = cv2.imread('/content/Unknown.jpeg', cv2.IMREAD_GRAYSCALE)

# define a threshold, 128 is the middle of black and white in grey scale
thresh = 128

# threshold the image
img_binary = cv2.threshold(img_grey, thresh, 255, cv2.THRESH_BINARY)[1]

f=cv2.distanceTransform(img_binary,cv2.DIST_C,3)
print(f)

# Commented out IPython magic to ensure Python compatibility.
#3X3
from PIL import Image, ImageFilter
# %matplotlib inline
image = cv2.imread('/content/Unknown.jpeg') # reads the image
image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV) # convert to HSV
figure_size = 3 # the dimension of the x and y axis of the kernal.
new_image = cv2.blur(image,(figure_size, figure_size))
plt.figure(figsize=(11,6))
plt.subplot(121), plt.imshow(cv2.cvtColor(image, cv2.COLOR_HSV2RGB)),plt.title('Original')
plt.xticks([]), plt.yticks([])
plt.subplot(122), plt.imshow(cv2.cvtColor(new_image, cv2.COLOR_HSV2RGB)),plt.title('Mean filter')
plt.xticks([]), plt.yticks([])
plt.show()

# Commented out IPython magic to ensure Python compatibility.
#5X5
from PIL import Image, ImageFilter
# %matplotlib inline
image = cv2.imread('/content/Unknown.jpeg') # reads the image
image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV) # convert to HSV
figure_size = 5 # the dimension of the x and y axis of the kernal.
new_image = cv2.blur(image,(figure_size, figure_size))
plt.figure(figsize=(11,6))
plt.subplot(121), plt.imshow(cv2.cvtColor(image, cv2.COLOR_HSV2RGB)),plt.title('Original')
plt.xticks([]), plt.yticks([])
plt.subplot(122), plt.imshow(cv2.cvtColor(new_image, cv2.COLOR_HSV2RGB)),plt.title('Mean filter')
plt.xticks([]), plt.yticks([])
plt.show()

# Commented out IPython magic to ensure Python compatibility.
#7X7
from PIL import Image, ImageFilter
# %matplotlib inline
image = cv2.imread('/content/Unknown.jpeg') # reads the image
image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV) # convert to HSV
figure_size = 7 # the dimension of the x and y axis of the kernal.
new_image = cv2.blur(image,(figure_size, figure_size))
plt.figure(figsize=(11,6))
plt.subplot(121), plt.imshow(cv2.cvtColor(image, cv2.COLOR_HSV2RGB)),plt.title('Original')
plt.xticks([]), plt.yticks([])
plt.subplot(122), plt.imshow(cv2.cvtColor(new_image, cv2.COLOR_HSV2RGB)),plt.title('Mean filter')
plt.xticks([]), plt.yticks([])
plt.show()

import cv2
from google.colab.patches import cv2_imshow

def MeanFilter(image, filter_size):
    # create an empty array with same size as input image
    output = np.zeros(image.shape, np.uint8)

    # creat an empty variable
    result = 0

    # deal with filter size = 3x3
    if filter_size == 9:
        for j in range(1, image.shape[0]-1):
            for i in range(1, image.shape[1]-1):
                for y in range(-1, 2):
                    for x in range(-1, 2):
                        result = result + image[j+y, i+x]
                output[j][i] = int(result / filter_size)
               

def main():
    # read image
    gray_lena = cv2.imread('/content/Unknown.jpeg', 0)
    fig.add_subplot(3, 2, 3)
    plt.title('3x3 Mean Filter')
    cv2.imshow(MeanFilter(grey_lena,9))